
= semantic_form_for([:admin,  post],  :html => {:multipart => true } ) do |f|
  .twelve.columns
    .six.columns.alpha
      = f.input :location
      = f.input :user_id, :as => :hidden, :value => current_user.id
      = f.input :is_personal, :label => "Post as " + current_user.email.gsub(/\@.+$/, '') + " instead of Ptarmigan"
      = f.input :not_news, :label => "Not frontpage news", :hint => "Include in 'stuff we like' section (Helsinki)"
      - if f.object.carousel?
        = f.input :hide_carousel, :label => "Remove this post from carousel", :hint => "Get old posts out of the carousel!"
    .six.columns.omega
      = f.input :subsite, :label => 'Assign to sub-site', :hint => 'will appear in content of subdomain'
      = f.input :show_on_main, :label => 'Also show on main site', :hint => 'Will appear in subdomain but also in main Ptarmigan news on regular site'
      = f.input :sticky, :label => 'Make "sticky"', :hint => "Will stay at top of frontpage while checked, and also appear in sidebars of other pages"
  .twelve.columns
    = tabs_for do |tab|
      - tab.create('english', 'English') do
        = f.globalize_fields_for :en do |en|
          %p
            Title of post
            = en.text_field :title
          %p
            Body
            %br/
            = en.cktext_area :body
      - tab.create('finnish', 'Finnish') do
        = f.globalize_fields_for :fi do |fi|
          %p
            Title of post
            = fi.text_field :title
          %p
            Body
            %br/
            = fi.cktext_area :body
      - tab.create('estonian', 'Estonian') do
        = f.globalize_fields_for :et do |et|
          %p
            Title of post
            = et.text_field :title
          %p
            Body
            %br/
            = et.cktext_area :body         
      - tab.create('russian', 'Russian') do
        = f.globalize_fields_for :ru do |ru|
          %p
            Title of post
            = ru.text_field :title
          %p
            Body
            %br/
            = ru.cktext_area :body
  .twelve.columns
    .six.columns.alpha
      - unless f.object.new_record?
        - if f.object.carousel?
          = image_tag f.object.carousel.url(:full)
          = f.check_box :remove_carousel
          Delete carousel image          
      = f.input :carousel, :label => "Carousel image (1180x492)", :hint => "will appear in frontpage carousel if exists"

      - unless f.object.new_record?
        - if f.object.alternateimg?
          = image_tag f.object.alternateimg.url
          = f.check_box :remove_alternateimg
          Delete alternate image
      = f.input :alternateimg, :label => 'Alternate image', :hint => "Different from carousel; will appear  on standalone post page (if it exists), at the top of the post,  instead of the carousel image"
    .six.columns.omega
      = f.input :embed_gallery_id, :as => :select, :collection => Event.where(:id => [Flicker.all.map(&:event_id).uniq]).sort_by{|x| x.date}.reverse, :hint => "If archival images exist for an event, embed the gallery in this post"
      = f.input :second_embed_gallery_id, :as => :select, :collection => Event.where(:id => [Flicker.all.map(&:event_id).uniq]).sort_by{|x| x.date}.reverse, :hint => "Optional second gallery - will be combined with first gallery as one slideshow"      
      = f.input :embed_above_post, :label => "Gallery above post?", :hint => "if an event archive photo gallery is embedded and this is checked, the gallery will appear above the post body, otherwise it will appear below"
      = f.input :published, :label => "Publish on site!", :hint => "leave unchecked for draft mode"
      = f.input :published_at, label: 'Publication date and time?', hint: 'Leave blank for NOW', as: :string,  input_html: {class: 'datetimepicker', value: f.object.new_record? ? '' : (f.object.published_at.nil? ? '' : f.object.published_at.strftime('%Y-%m-%d %H:%M'))}
  = f.actions do
    = f.submit "Submit"

:javascript
  $(function() {
    $("#tabs").tabs();
    $('.datetimepicker').datetimepicker({format:'Y-m-d H:i'});
  });